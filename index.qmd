---
title: "Analysis of Star Wars film data"
author: Juulia Suvilehto
format:
  html:
    backgroundcolor: "black"
    fontcolor: "white"
    linkcolor: "yellow"
    mainfont: "Helvetica"
    echo: false
    toc: true
    toc-location: right
    code-links:
    - text: Data Import Code
      icon: file-code
      href: data-import.py
    include-after-body: 
      file: resources/footer.html
      #text: "<center>Copyright Juulia Suvilehto. All rights reserved.</center>"
    anchor-sections: false
    smooth-scroll: true
---



```{python}
#| warning: false
#| output: false
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import duckdb
import pathlib

# for the species representation
import plotly.express as px

# for the circular treemap
import plotly.graph_objects as go
from matplotlib.colors import to_rgb
import colorsys

# for word cloud
from wordcloud import WordCloud
import string
from PIL import Image
import random

# word imporance 
from sklearn.feature_extraction.text import TfidfVectorizer
import nltk
from nltk.corpus import stopwords
import string
nltk.download('stopwords')


random_seed = 42

con = duckdb.connect(database = "starwars_data.duckdb", read_only = True)
film_appearances = con.execute("SELECT * FROM fct_film_appearances").df()
species = con.execute("SELECT * FROM dim_species").df()
ppl = con.execute("SELECT * FROM fct_people").df()
films = con.execute("SELECT * FROM dim_films").df()

df = pd.merge(pd.merge(film_appearances.query("resource_type == 'person'"), ppl, how='left', on='resource_url'), films, how='left', on='film_url').sort_values('episode_id')

```

The main Star Wars saga consists of three trilogies: *the prequel trilogy*, *the original trilogy*, and *the sequel trilogy*. Together, these are referred to as *"the Skywalker Saga"*. In the cinematic universe, the order of the trilogies is as above, but they were released in a different order. The original trilogy was released 1977-1983, the prequel trilogy in 1999-2005, and the sequel trilogy in 2015-2019. 

The following analysis builds on the data from [the SW API](https://swapi.dev/) which covers the prequel trilogy and the original trilogy. 

## NLP analysis of the opening crawl 

The Star Wars opening crawl is a signature device of the opening sequences of every numbered film of the Star Wars series, an American epic space opera franchise created by George Lucas. Within a black sky background featuring a smattering of stars, the crawl is preceded both by the opening static blue text, "A long time ago in a galaxy far, far away...." and by the Star Wars logo which recedes toward a central point on the screen before disappearing. The crawl text, which describes the backstory and context of the film, then recedes toward a higher point in relation to the screen and with an apparent effect of disappearing in the distance. [^1]

[^1]: Source: [Wikipedia: *Star Wars* opening crawl](https://en.wikipedia.org/wiki/Star_Wars_opening_crawl)

```{python}
#| warning: false
#| output: false

# prepare word cloud

# Prepare the text data for word cloud
all_opening_crawls = '\n'.join(films.opening_crawl.tolist())
all_opening_crawls_minus_punctuation = all_opening_crawls.translate(str.maketrans('', '', string.punctuation)).lower()

# Read in the word cloud mask
mask = np.array(Image.open("resources/sw_logo.png"))

# recoloring function to make the word cloud yellow
def recolor_with_yellow(word, font_size, position, orientation, random_state=None, **kwargs):
    return "hsl(54, 100%%, %d%%)" % random.randint(40, 90)
```


```{python}
#| fig-cap: "Word cloud of the opening crawls of all the movies shows prevalent common themes related to the empire and rebellion and as well as the setting in space"
#| label: wordcloud

# create word cloud with logo masking
wordcloud = WordCloud(max_words=1000, margin=0, mask=mask, random_state=random_seed).generate(all_opening_crawls_minus_punctuation)
fig = plt.figure()
plt.imshow(wordcloud.recolor(color_func=recolor_with_yellow, random_state=random_seed), interpolation="bilinear")
fig.patch.set_facecolor('black')
plt.axis("off")
plt.tight_layout()
plt.show()
```

Further inspection of the words used in the opening crawls shows differences between the prequel trilogy and the original trilogy. The most distinctive words in the prequel trilogy opening crawls reflect the key themes in the trilogy: the corruption of the Galactic Republic and its last chancellor, Sheev Palpatine. The most distinctive words in the original trilogy reflect the themes central in those movies: the quest for freedom by the Rebel Alliance and the central role of Luke Skywalker.


```{python}
# prepare data for word importance plot

# Combine the crawl texts per trilogy
prequel_text = films.query('episode_id < 4').opening_crawl.str.cat()
original_text = films.query('episode_id > 3').opening_crawl.str.cat()

# Preprocess
def preprocess(text):
    stop_words = set(stopwords.words('english'))
    text = text.lower()
    text = text.translate(str.maketrans('', '', string.punctuation))
    return ' '.join([word for word in text.split() if word not in stop_words])

docs = [preprocess(prequel_text), preprocess(original_text)]

# TF-IDF vectorization
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(docs)
features = vectorizer.get_feature_names_out()

# Extract top N words
def get_top_n_words(tfidf_row, features, top_n=10):
    scores = tfidf_row.toarray().flatten()
    top_indices = scores.argsort()[-top_n:][::-1]
    return {features[i]: scores[i] for i in top_indices}

top_words_prequel = get_top_n_words(tfidf_matrix[0], features)
top_words_original = get_top_n_words(tfidf_matrix[1], features)
```


```{python}
#| fig-cap: "Top distinctive words by TF-IDF score in the opening crawls of the Star Wars prequel and original trilogies"
#| label: wordimportance

# Plotting word importance as side-by-side bar plots
fig, (ax1, ax2) = plt.subplots(1, 2,  sharey=False, sharex=True)
fig.patch.set_facecolor('black')  # full background

# Prequel
prequel_words = list(top_words_prequel.keys())[::-1]
prequel_scores = list(top_words_prequel.values())[::-1]
ax1.barh(prequel_words, prequel_scores, color='slategray')
ax1.set_title('Prequel Trilogy', color='white', loc='left')
ax1.set_facecolor('black')
ax1.tick_params(colors='white')
ax1.yaxis.set_tick_params(length=0)

# Original
original_words = list(top_words_original.keys())[::-1]
original_scores = list(top_words_original.values())[::-1]
ax2.barh(original_words, original_scores, color='slategray', alpha=0.5)
ax2.set_title('Original Trilogy', color='white', loc='left')
ax2.set_facecolor('black')
ax2.tick_params(colors='white')
ax2.yaxis.set_tick_params(length=0)

fig.text(0.55, -0.03, 'TF-IDF Score', ha='center', color='white', fontsize=12)
plt.tight_layout(rect=[0, 0, 1, 0.95])
plt.show()
```

## Characters and species

The Star Wars universe has a range of different species that are represented. The majority of these species can be classified as *mammal*. Other possible classifications of species are amphibian, reptilian, artificial, gastropod, insectoid, and unknown.

Of mammalian species, the species with by far the most named characters is *human*.
The plot is interactive, so you can hover over the different sectors to see the relevant classification, species, and designation.

```{python}
# prep data for species plot
df_w_species = pd.merge(df, species, how='left', left_on = 'species', right_on='resource_url')

# NB: there is one species with classification "mammals" instead of "mammal"
# it should probably be "mammal" and fixed earlier on in the flow
# but for now we fix it here
df_w_species['classification'] = df_w_species.classification.str.removesuffix('s')
# there is one species that should be "reptilian" by classification and "sentient" 
# by designation but these are turned around. Again, would be better to fix this earlier 
# in the flow but we're fixing it here
mask = df_w_species['classification'] == 'sentient'
df_w_species.loc[mask, ['classification', 'designation']] = df_w_species.loc[mask, ['designation', 'classification']].values
# there is one species that has classification "reptile" where everything else has "reptilian"
df_w_species.loc[df_w_species['classification'] == 'reptile', 'classification'] = 'reptilian'

# add roman numeral of episode id
roman_numerals = {
    1: 'I',
    2: 'II',
    3: 'III',
    4: 'IV',
    5: 'V',
    6: 'VI'
}

df_w_species['episode_roman'] = df_w_species['episode_id'].map(roman_numerals)

# Clean the data for sunburst plot
df_cleaned = df_w_species[['character_name', 'species_name', 'classification', 'designation']].drop_duplicates()
df_sentient = df_cleaned[df_cleaned['designation'] == 'sentient'].copy()

```


```{python}
# general definitions and helper functions
# Base classification colors (light variants)
base_colors = {
    'mammal': '#dba579',        # "jedi"
    'reptilian': '#334e30',     # "naboo"
    'amphibian': '#715A62',     # "dragobah"
    'insectoid': '#2e557c',     # "hoth3"
    'artificial': '#B99D31',    # "c3po"
    'gastropod': '#554269',      # "yoda"
    'unknown': '#aba49e'        # "phasma"
}

# Helper to darken a hex color
def darken(hex_color, factor):
    r, g, b = to_rgb(hex_color)
    h, l, s = colorsys.rgb_to_hls(r, g, b)
    l = max(0, l * (1 - factor))  # reduce lightness
    r2, g2, b2 = colorsys.hls_to_rgb(h, l, s)
    return f'rgb({int(r2*255)}, {int(g2*255)}, {int(b2*255)})'

# Function to format the tooltip
def format_tooltip(label, labels, parents):
    # Initialize the path list
    path = []
    
    # Traverse the hierarchy from the character up to the root (sentient)
    current_label = label
    while current_label != '' and current_label != 'sentient':  
        path.append(current_label)
        current_label = parents[labels.index(current_label)].split('/')[-1]  # Find the parent label
    path.reverse()  # Reverse the path to start from 'sentient'

    # Define the hierarchy levels
    hierarchy = ["Classification", "Species", "Character"]

    # Create the formatted tooltip
    tooltip = ""
    for level, value in zip(hierarchy, path):
        tooltip += f"{level}: {value}<br>"
    return tooltip

```


```{python}
#| label: circular-treemap

# Build hierarchy data
fig = px.sunburst(
    df_sentient,
    path=['designation', 'classification', 'species_name', 'character_name'],
    values=None,
    branchvalues='total'
)

# Get labels & parents
labels = list(fig.data[0]['labels'])  # Convert to list
parents = list(fig.data[0]['parents'])  # Convert to list

# Create a lookup table from character/species to classification
classification_map = {}

for _, row in df_sentient.iterrows():
    classification_map[row['classification']] = row['classification']
    classification_map[row['species_name']] = row['classification']
    classification_map[row['character_name']] = row['classification']

# Build the label_to_classification mapping using this
label_to_classification = {}

for label in labels:
    if label == 'sentient':
        continue
    classification = classification_map.get(label, 'unknown')
    label_to_classification[label] = classification

# Assign custom colors based on depth and classification
colors = []
for i, label in enumerate(labels):
    classification = label_to_classification.get(label, 'unknown')
    base_color = base_colors.get(classification, '#AAAAAA')

    # Determine depth: how many parents up to 'sentient'
    depth = 0
    parent = parents[i]
    while parent != '' and parent != 'sentient':
        depth += 1
        try:
            idx = labels.index(parent)
            parent = parents[idx]
        except:
            break

    if label == 'sentient':
        colors.append('black')
    else:
        dark_factor = 0.25 * depth  # darker as we go deeper
        colors.append(darken(base_color, dark_factor))

# Assign hovertemplate with custom tooltip
fig.update_traces(
    marker=dict(colors=colors),
    insidetextfont=dict(family='Helvetica'),
    # Custom tooltip for each label
    hovertemplate=[format_tooltip(label, labels, parents) for label in labels]  
)

# Make center label black
text_colors = ['black' if label == 'sentient' else 'white' for label in labels]
fig.data[0]['textfont']['color'] = text_colors

# Layout
fig.update_layout(
    font=dict(color='white', family='Helvetica'),
    paper_bgcolor='black',
    plot_bgcolor='black',
    coloraxis_showscale=False
)

fig.show()
```

Known species and named characters belonging to these species from the Star Wars prequel trilogy and the original trilogy.

## Species representation in the two trilogies

The high prevalence of mammalian characters comes from the movies, where the majority of named characters in each movie is a mammal. This is particularly true in the original trilogy, where the only non-mammal named characters are the druids R2-D2 and C-3PO; Jabba Desilijic Tiure, who is more commonly known as Jabba de Hutt, who belongs to the Hutt species (classification: gastropod); and Ackbar, who belongs to the Mon Calamari species (classification: amphibian).

Moreover, the following plot clearly shows a more numerous character gallery in the prequel trilogy, which was published later, compared with the original trilogy. The plot is interactive, so you can hover over the different data points to see a full list of named characters from that species class in that movie.

```{python}

# Step 1: Group and aggregate
grouped = df_w_species.groupby(['episode_roman', 'classification'])['character_name'].agg(
    character_count='nunique',
    character_names=lambda x: '<br>'.join(sorted(set(x)))
).reset_index()

# fine-tuning data to get the hover tooltip to act right 
# even when there are 0 characters of that species class present
# find all combinations of movie and species
all_combinations = pd.MultiIndex.from_product(
    [grouped['episode_roman'].unique(), grouped['classification'].unique()],
    names=['episode_roman', 'classification']
)

# Merge the full set with the original dataframe
grouped_full = grouped.set_index(['episode_roman', 'classification']).reindex(all_combinations).reset_index()

# Fill missing character_names with an empty string and character_count with 0
grouped_full['character_names'] = grouped_full['character_names'].fillna('')
grouped_full['character_count'] = grouped_full['character_count'].fillna(0)
```

```{python}
#| label: species-representation-count

fig = px.area(
    grouped_full,
    x='episode_roman',
    y='character_count',
    color='classification',
    custom_data=['character_names'],  # pass character names to hover
    hover_data=None,  # we'll control hover ourselves
    labels={
        'episode_roman': 'EPISODE',
        'character_count': '# Unique Characters'
    },
    color_discrete_sequence= px.colors.sequential.Brwnyl
)

# Custom hover to suppress weirdness on small/empty areas
fig.update_traces(
    hovertemplate="<b>Classification: %{fullData.name}</b><br># Characters: %{y}<br>"
    "%{customdata[0]}<extra></extra>"
)

# Add shaded trilogy regions
fig.add_vrect(x0=0, x1=2.5, fillcolor='white', opacity=0.2, line_width=0)

# Trilogy labels
fig.add_annotation(x=0.6, y=40,
                   text="Prequel Trilogy", showarrow=False, font=dict(color='white', size=16))
fig.add_annotation(x=4.4, y=40,
                   text="Original Trilogy", showarrow=False, font=dict(color='white', size=16))

fig.update_layout(
    legend_title_text='Classification',
    paper_bgcolor='black',  # Set the background color of the entire figure
    plot_bgcolor='black',   # Set the background color of the plot area
    font=dict(color='white'),  # Set all text to white
    xaxis=dict(showgrid=False, zeroline=False),  # No grid lines for x-axis
    yaxis=dict(showgrid=False, zeroline=False)  # No grid lines for y-axis
)
fig.show()

```

Species representation by main classification in the different movies shows more characters and more non-mammal characters in the prequel trilogy compared with the original trilogy.

## Character arcs of returning characters

The appearance of recurring characters in the different films. This plot confirms the much wider character gallery of the prequel trilogy compared with the original trilogy. Most recurring characters are present in consecutive films, but some characters such as Jabba Desilijic Tiure (Jabba de Hutt) have a more spread out story arc. Somewhat surprisingly two key characters, Palpatine and Yoda, both are missing from A New Hope (EPISODE IV), which was the first film to be released in the Star Wars cinematic universe.

```{python}
#prep data for character arc plot

# Sort by movie release order
movie_order = (
    df[['title', 'episode_id', 'release_date']]
    .drop_duplicates()
    .sort_values('episode_id')
    .reset_index(drop=True)
)

# Map movie titles to numeric positions (for plotting)
movie_order['x'] = range(len(movie_order))
movie_map = dict(zip(movie_order['title'], movie_order['x']))

# Apply x-coordinates to your data
df['x'] = df['title'].map(movie_map)

# Count how many unique movies each character appears in
character_counts = df.groupby('character_name')['title'].nunique()

# Sort characters by number of movie appearances (descending)
sorted_characters = character_counts.sort_values(ascending=True)

# Limit to recurring characters
recurring_characters = sorted_characters[sorted_characters > 1].index.tolist()

# limit to recurring characters
df = df.query("character_name in @recurring_characters")

# Assign y-positions based on this order
char_map = {name: i for i, name in enumerate(recurring_characters)}
df['y'] = df['character_name'].map(char_map)

# Sort for line drawing
df = df.sort_values(by=['character_name', 'x'])
```

```{python}
# Add linebreaks to movie names

titles_with_spaces = {
'The Phantom Menace':'The Phantom\nMenace',
'Attack of the Clones':'Attack of\nthe Clones',
'Revenge of the Sith':'Revenge of\nthe Sith',
'A New Hope': 'A New Hope',
'The Empire Strikes Back':'The Empire\nStrikes\nBack',
'Return of the Jedi':'Return of\nthe Jedi'} 

movie_order['title_pretty'] = movie_order['title'].map(titles_with_spaces).fillna(df['title'])
```

```{python}
#| fig-cap: Continuous story arcs (lighter line) and story arcs that skip some movies (darker lines) shown for all recurring characters.
#| label: storyarcs

fig = plt.figure(figsize=(6, 8))
ax = plt.gca()

# Draw lines per character
for char, group in df.groupby('character_name'):
    x_vals = group['x'].tolist()
    y_val = char_map[char]

    # Go through pairs of consecutive appearances
    for i in range(len(x_vals) - 1):
        x1, x2 = x_vals[i], x_vals[i + 1]
        # if story arc is continuous (two consecutive movies), use a lighter color, else use a darker one
        color = 'white' if x2 - x1 == 1 else 'slategray'
        plt.plot([x1, x2], [y_val, y_val], color=color, linewidth=5, alpha=0.7)

# Plot dots
plt.scatter(df['x'], df['y'], color='white', s=20, zorder=3)

# Add shaded trilogy regions
plt.axvspan(-0.2, 2.5, color='white', alpha=0.2)

# Trilogy labels
plt.text(-0.1, -1.2, "Prequel Trilogy", color='white')
plt.text(3.8, -1.2, "Original Trilogy", color='white')

# Formatting
plt.yticks(list(char_map.values()), list(char_map.keys()), color='white', size=8)
plt.xticks(movie_order['x'], movie_order['title_pretty'], ha='center', color='white', size=9)
ax.tick_params(top=True, labeltop=True, bottom=False, labelbottom=False)

# no labels
plt.xlabel("")
plt.ylabel("")
plt.title("")

# dark mode
plt.tight_layout()
fig.patch.set_facecolor('black')
ax.set_facecolor('black')

# display
plt.show()
```